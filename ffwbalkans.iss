; Script generated by the Inno Script Studio Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "1st VFW Custom Balkans Theater"
#define MyAppVersion "4.33.1.1"
#define MyAppPublisher "1st Virtual Fighter Wing"
#define MyAppURL "http://www.firstfighterwing .com/"
#define MyAppExeName "ffwbalkans.exe"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{4A65F7D9-777B-4246-B46D-C4AE763ABB7D}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
OutputBaseFilename=ffwbalkans
Compression=lzma
SolidCompression=yes
DefaultDirName={code:GetBMSDir}
AppendDefaultDirName=False
ShowLanguageDialog=no
DisableProgramGroupPage=yes
EnableDirDoesntExistWarning=True
DirExistsWarning=no
;; Couldn't get this working
;; UninstallDisplayIcon=ffw.ico  

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Files]
Source: "Input\Data\Add-On 1st VFW Balkans\*"; DestDir: "{app}\Data\Add-On 1st VFW Balkans\"; Flags: recursesubdirs; 

[Code]
Function GetBMSDir(Param: String): String;
begin
  if Not RegQueryStringValue(HKEY_LOCAL_MACHINE, 'SOFTWARE\Benchmark Sims\Falcon BMS 4.33 U1',  
     'baseDir', Result) then begin
     Result := 'Unknown';
  end;
end;

function TheaterDefinitionPath() : String;
begin
  Result := ExpandConstant('{app}\Data\Terrdata\theaterdefinition\theater.lst');
end;

function TheaterDefinitionLine() : String;
begin
  Result := 'Add-On 1st VFW Balkans\Terrdata\theaterdefinition\Balkans.tdf';
end;

procedure AddTheaterDefinition();
var
  FileLines: TStringList;
  FileName: String;
begin
  FileName := TheaterDefinitionPath();
  FileLines := TStringList.Create;
  FileLines.Duplicates := dupIgnore;
  try
    FileLines.LoadFromFile(FileName);
    FileLines.Add(TheaterDefinitionLine());
    FileLines.SaveToFile(FileName);
  finally
    FileLines.Free;
  end;
end;

procedure RemoveTheaterDefinition();
var
  I: Integer;
  Line: string;
  FileLines: TStringList;
begin
  FileLines := TStringList.Create;
  try
    FileLines.LoadFromFile(TheaterDefinitionPath());
    for I := 0 to FileLines.Count - 1 do
    begin
      Line := FileLines[I];
      if (Line = TheaterDefinitionLine()) then
      begin
        FileLines.Delete(I);
        FileLines.SaveToFile(TheaterDefinitionPath());
        Break;
      end;
    end;
  finally
    FileLines.Free;
  end;
end;

procedure CurStepChanged(CurStep: TSetupStep);
begin
  if (CurStep = ssPostInstall) then begin    
    AddTheaterDefinition();
  end;
end;

procedure CurUninstallStepChanged(CurUninstallStep: TUninstallStep);
begin
  if (CurUninstallStep = usPostUninstall) then begin
    RemoveTheaterDefinition();
  end;
end;
